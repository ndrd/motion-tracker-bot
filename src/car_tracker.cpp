#include <iostream>
#include "opencv2/opencv.hpp" 
#include "opencv2/core/core.hpp"  
#include "opencv2/highgui/highgui.hpp"  
#include "opencv2/video/background_segm.hpp"
#include "tracker/BlobTracking.hpp"  

using namespace cv;
using namespace cvb;  
using namespace std;  
  
  
int main(int argc, const char* argv[])  
{  
  
 //global variables  
 Mat frame; //current frame  
 Mat fgMaskMOG; //fg mask generated by MOG method  
  
  
 Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor  
 pMOG = new BackgroundSubtractorMOG();  

 BlobTracking* blobTracking;
 blobTracking = new BlobTracking;

 string fileName = argv[1]; 
 VideoCapture stream1(fileName);   //0 is the id of video device.0 if you have only one camera     
  
 Mat element = getStructuringElement(MORPH_RECT, Size(3, 3), Point(1,1) );     
 Mat  img_blob; 

 //unconditional loop     
 while (true) {     
  Mat cameraFrame;     
  if(!(stream1.read(frame))) //get one frame form video     
   break;  
    
  //resize(frame, frame, Size(frame.size().width, frame.size().height/2) );  
  pMOG->operator()(frame, fgMaskMOG);
  
  if(!fgMaskMOG.empty()) 
  {
  	blobTracking->process_blob(frame, fgMaskMOG, img_blob);
  }
  
  imshow("Origin", frame);  
  imshow("MaaOG", fgMaskMOG);  
  imshow("blob", img_blob);  
  
  if (waitKey(2) >= 0)     
   break;     
 }

 return 0;
  
}  