#include <iostream>
#include "opencv2/opencv.hpp" 
#include "opencv2/core/core.hpp"  
#include "opencv2/highgui/highgui.hpp"  
#include "opencv2/video/background_segm.hpp"  

using namespace cv;  
using namespace std;  
  
  
int main(int argc, const char* argv[])  
{  
  
 //global variables  
 Mat frame; //current frame  
 Mat fgMaskMOG; //fg mask generated by MOG method  
 Mat fgMaskMOG2; //fg mask fg mask generated by MOG2 method  
 Mat fgMaskGMG; //fg mask fg mask generated by MOG2 method  
   
  
 Ptr<BackgroundSubtractor> pMOG; //MOG Background subtractor  
 Ptr<BackgroundSubtractor> pMOG2; //MOG2 Background subtractor  
 Ptr<BackgroundSubtractorGMG> pGMG; //MOG2 Background subtractor  
   
  
 pMOG = new BackgroundSubtractorMOG();  
 pMOG2 = new BackgroundSubtractorMOG2();  
 pGMG = new BackgroundSubtractorGMG();  
   
  
 string fileName = argv[1]; 
 VideoCapture stream1(fileName);   //0 is the id of video device.0 if you have only one camera     
  
 Mat element = getStructuringElement(MORPH_RECT, Size(3, 3), Point(1,1) );     
  
 //unconditional loop     
 while (true) {     
  Mat cameraFrame;     
  if(!(stream1.read(frame))) //get one frame form video     
   break;  
    
  //resize(frame, frame, Size(frame.size().width, frame.size().height) );  
  pMOG->operator()(frame, fgMaskMOG);  
 // pMOG2->operator()(frame, fgMaskMOG2);  
  //pGMG->operator()(frame, fgMaskGMG);  
  //morphologyEx(fgMaskGMG, fgMaskGMG, CV_MOP_CLOSE, element);   
  
  imshow("Origin", frame);  
  imshow("MOG",fgMaskMOG);  
  //imshow("MOG2", fgMaskMOG2);  
  //imshow("GMG", fgMaskGMG);  
  fgMaskMOG.release();
  
  if (waitKey(30) >= 0)     
   break;     
 }  
 return 0;
  
}  